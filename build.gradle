buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "com.marklogic:ml-gradle:2.4.0"
    }
}

plugins {
    id "com.marklogic.ml-gradle" version "2.4.0"
    id "java"
    id "eclipse"
    id "idea"
    id "checkstyle"
    id "maven-publish"
}

allprojects {
    apply plugin: "com.marklogic.ml-gradle"

    repositories {
        jcenter()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://developer.marklogic.com/maven2/" }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '3.2.1'
    }

    sourceSets.test.resources.srcDir 'src/test/java'
}


subprojects {

    /*
     * Not applying the bintray plugin. Couldn't get it working properly when declared
     * in subprojects, and when declared at root level of this script, it caused an httpcomponents
     * classpath issue with ml-gradle in the core project. So for now, each project has to
     * duplicate bintray publishing configuration.
     */

    apply plugin: "java"

    if (!it.name.startsWith('samples')) {
        apply plugin: "com.jfrog.bintray"
        apply plugin: 'maven-publish'
    }

    ext {
        springVersionDefault = '3.0.7.RELEASE'
        springVersion = project.hasProperty('springVersion') ? getProperty('springVersion') : springVersionDefault
    }

    dependencies {
        compile 'ch.qos.logback:logback-classic:1.1.8'
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile "org.springframework.batch:spring-batch-core:$springVersion"
        compile "com.marklogic:java-client-api:4.0.0-EA4"
        compile "com.marklogic:ml-javaclient-util:2.12.0"

        testCompile "org.springframework.batch:spring-batch-test:$springVersion"
        testCompile "com.marklogic:ml-junit:2.6.0"
}

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        configFile = file("${project.rootDir}/dev-tools/checkstyle/checkstyle.xml")
        toolVersion = '7.1.2'
    }

    if (!it.name.startsWith('samples')) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            baseName = artifactId
            version = project.version
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        jar {
            baseName = artifactId
            version = project.version
        }

        /*
         * Assumes each project has a single publication.
         */
        publishing {
            publications {
                mainJavaWithSources(MavenPublication) {
                    groupId group
                    artifactId project.property("artifactId")
                    version project.version
                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }


}

project(':core') {

    dependencies {

        compile project(":infrastructure")

        // Used by ML Job Repo implementation; depends on DataFieldMaxValueIncrementer
        compile "org.springframework:spring-jdbc:4.2.6.RELEASE"

        // Used by MarkLogicBatchConfiguration, which depends on Jaxb2Marshaller
        compile "org.springframework:spring-oxm:4.2.6.RELEASE"

        // For deploying the ML Job Repo
        compile "com.marklogic:ml-app-deployer:2.3.0"

        // For the CLI
        compile "net.sf.jopt-simple:jopt-simple:5.0.1"

        runtime "org.springframework.batch:spring-batch-core:$springVersion"

        //com.marklogic.spring.batch.Main extends com.marklogic.client.helper.LoggingObject
        runtime "com.marklogic:ml-javaclient-util:2.12.0"

        runtime "org.springframework:spring-jdbc:4.2.6.RELEASE"

        runtime "net.sf.jopt-simple:jopt-simple:5.0.1"
    }
/*
    task testExamples(type: GradleBuild) {
        buildFile = '../examples/build.gradle'
        tasks = [ 'test' ]
    }

    test.dependsOn testExamples
*/
}

project(":infrastructure") {
    description = 'MarkLogic Spring Batch Infrastructure'
    dependencies {
        // For importing RDF
        compile('org.apache.jena:jena-arq:2.13.0') {
            exclude(group: 'org.slf4j')
            exclude(group: 'ch.qos.logback')
            exclude(group: 'log4j')
        }
        compile('org.apache.jena:jena-core:2.13.0') {
            exclude(group: 'org.slf4j')
            exclude(group: 'xerces')
            exclude(group: 'commons-cli')
        }
        compile('com.hp.hpl.jena:jena:2.6.4') {
            exclude(group: 'org.slf4j')
        }
        compile('com.marklogic:marklogic-jena:1.0.0'){
            changing=true
            exclude(group: 'org.slf4j')
            exclude(group: 'log4j')
            exclude(group: 'ch.qos.logback')
        }
    }

}

project(':test') {
    dependencies {
        compile project(':core')
        compile "org.springframework.batch:spring-batch-test:$springVersion"
        compile "com.marklogic:ml-junit:2.6.0"
    }
}

project(':samples') {
    apply plugin: "application"

    dependencies {
        compile project(':core')
        testCompile project(':test')
        compile "org.apache.opennlp:opennlp-tools:1.6.0"
    }

    distributions {
        main {
            baseName = "samples"
        }
    }

    jar {
        baseName = "samples"
    }

    mainClassName = "org.springframework.batch.core.launch.support.CommandLineJobRunner"
    //mainClassName = "com.marklogic.spring.batch.Main"
    applicationName = "samples"
}


